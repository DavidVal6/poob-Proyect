#BlueJ class context
comment0.target=ICPC
comment0.text=\r\n\ This\ class\ is\ a\ graphical\ representation\ of\ the\ ICPC\ problem\ B\:\ The\ Cost\ of\ speed\ Limits\r\n\ \r\n\ @author\ Olaya\ -\ Valencia\r\n\ @1.0\r\n
comment1.params=length\ width
comment1.target=ICPC(int,\ int)
comment1.text=\r\n\ Create\ a\ simulation\ of\ a\ ICPC\ network\r\n\ @param\ width\ \ the\ desired\ width\ for\ the\ canvas\r\n\ @param\ height\ \ the\ desired\ height\ for\ the\ canvas\ \r\n
comment10.params=
comment10.target=void\ fillPosiciones()
comment11.params=sign\ intersectionA\ intersectionB
comment11.target=void\ moveSign(Sign,\ java.lang.String,\ java.lang.String)
comment11.text=\r\n\ Move\ the\ signal\ over\ the\ intersection\ A\r\n
comment12.params=intersectionA\ intersectionB
comment12.target=int[]\ direction(java.lang.String,\ java.lang.String)
comment13.params=color
comment13.target=void\ delIntersection(java.lang.String)
comment13.text=\r\n\ Delete\ an\ intersection\ from\ the\ simulation\r\n\ @param\ color\ indicates\ the\ intersection\ that\ wants\ delete\r\n
comment14.params=a\ b
comment14.target=void\ delRoad(java.lang.String,\ java.lang.String)
comment14.text=\r\n\ Delete\ a\ road\ from\ the\ simulation\r\n\ @param\ intersectionA\ and\ intersectionB\ indicates\ the\ road\ that\ wants\ delete\r\n
comment15.params=intersectionA\ intersectionB
comment15.target=void\ removeSign(java.lang.String,\ java.lang.String)
comment15.text=\r\n\ Remove\ a\ specific\ sign\ from\ the\ canvas\ of\ the\ simulation\r\n\ @param\ intersectionA\ and\ intersectionB\ indicates\ the\ road\ that\ going\ to\ have\ the\ sign\r\n
comment16.params=
comment16.target=boolean\ ok()
comment16.text=\r\n\ return\ if\ the\ last\ method\ was\ successfully\ finished\ \r\n
comment17.params=
comment17.target=java.lang.String[]\ intersections()
comment17.text=\r\n\ return\ the\ collection\ of\ the\ intersections\ in\ the\ simulation\r\n
comment18.params=
comment18.target=java.lang.String[][]\ roads()
comment18.text=\r\n\ return\ the\ collection\ of\ the\ routes\ in\ the\ simulation\r\n
comment19.params=
comment19.target=java.util.ArrayList\ signs()
comment2.params=length\ width\ cost
comment2.target=ICPC(int,\ int,\ int)
comment20.params=
comment20.target=java.util.ArrayList\ wronSigns()
comment21.params=
comment21.target=java.util.ArrayList\ unNecessarySigns()
comment22.params=
comment22.target=void\ makeVisible()
comment22.text=\r\n\ Makes\ visible\ the\ canvas\ with\ the\ simulation\r\n
comment23.params=speed
comment23.target=int\ getSpeedLimit(java.lang.String)
comment24.params=
comment24.target=void\ makeInvisible()
comment24.text=\r\n\ Makes\ invisible\ the\ canvas\ with\ the\ simulation\r\n
comment25.params=x\ touple\ toupleR
comment25.target=boolean\ isIn(java.util.ArrayList,\ java.lang.String[],\ java.lang.String[])
comment25.text=\r\n\ Return\ if\ the\ touples\ are\ contains\ in\ the\ Arrays\r\n
comment26.params=keys\ touple
comment26.target=Intersection[]\ isInRoute(java.util.Set,\ Intersection[])
comment26.text=\r\n\ Return\ if\ an\ intersection\ is\ hava\ an\ associated\ road\r\n
comment27.params=touple
comment27.target=java.lang.String[]\ reverseTouple(java.lang.String[])
comment27.text=\r\n\ Return\ the\ reverse\ of\ a\ touple\r\n
comment28.params=touple\ hash
comment28.target=java.lang.String[]\ findKeyR(java.lang.String[],\ java.util.HashMap)
comment28.text=\r\n\ Find\ the\ key\ of\ the\ HashMap\ that\ is\ equals\ to\ a\ parameter\r\n\ @param\ a\ touple\ to\ compare\r\n
comment29.params=
comment29.target=int\ getTotalSignCost()
comment3.params=cost\ roadsSpeedLimits
comment3.target=ICPC(int,\ int[][])
comment3.text=\r\n\ This\ method\ works\ as\ the\ input\ from\ the\ contest\r\n\ @param\ cost\r\n\ @param\ roadsSpeedLimits\r\n
comment30.params=
comment30.target=void\ finish()
comment31.params=touple\ hash
comment31.target=java.lang.String[]\ findKeyS(java.lang.String[],\ java.util.HashMap)
comment31.text=\r\n\ Find\ the\ key\ of\ the\ HashMap\ that\ is\ equals\ to\ a\ parameter\r\n\ @param\ a\ touple\ to\ compare\r\n
comment4.params=intersectionA\ intersectionB\ speedLimit
comment4.target=void\ roadSpeedLimit(java.lang.String,\ java.lang.String,\ int)
comment5.params=color\ x\ y
comment5.target=void\ addIntersection(java.lang.String,\ int,\ int)
comment5.text=\r\n\ Add\ the\ new\ intersection\ to\ the\ canvas\r\n\ @param\ color\ the\ desired\ color\ and\ identification\ of\ the\ intersection\ (should\ be\ unique)\r\n\ @x\ y\ the\ desired\ position\ of\ the\ intersecion\ in\ the\ canvas\r\n
comment6.params=key
comment6.target=void\ createIntersection(java.lang.String)
comment6.text=\r\n\ Create\ the\ intersection\ in\ the\ canvas\r\n
comment7.params=a\ b\ velocity
comment7.target=void\ addRoute(java.lang.String,\ java.lang.String,\ int)
comment7.text=\r\n\ Add\ the\ new\ road\ to\ the\ canvas\r\n\ @param\ intersectionA\ and\ intersectionB\ indicates\ the\ begin\ and\ the\ end\ of\ the\ route\ \r\n
comment8.params=intersectionA\ intersectionB\ speedLimit
comment8.target=void\ putSign(java.lang.String,\ java.lang.String,\ int)
comment8.text=\r\n\ Put\ a\ sign\ in\ the\ canvas\ of\ the\ simulation\r\n\ @param\ intersectionA\ and\ intersectionB\ indicates\ the\ road\ that\ going\ to\ have\ the\ sign\r\n\ @param\ speedLimit\ indicates\ the\ value\ of\ the\ sign\r\n
comment9.params=intersectionA\ intersectionB\ speedLimit\ touple
comment9.target=void\ createSign(java.lang.String,\ java.lang.String,\ int,\ java.lang.String[])
comment9.text=\r\n\ Create\ the\ sign\ in\ the\ canvas\r\n
numComments=32
